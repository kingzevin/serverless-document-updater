// Generated by CoffeeScript 1.7.1
(function() {
  var Errors, Keys, RedisManager, ShareJsDB;

  Keys = require('./UpdateKeys');

  RedisManager = require("./RedisManager");

  Errors = require("./Errors");

  module.exports = ShareJsDB = (function() {
    function ShareJsDB(project_id, doc_id, lines, version) {
      this.project_id = project_id;
      this.doc_id = doc_id;
      this.lines = lines;
      this.version = version;
      this.appliedOps = {};
      this.writeOp = this._writeOp.bind(this);
    }

    ShareJsDB.prototype.getOps = function(doc_key, start, end, callback) {
      var doc_id, project_id, _ref;
      if (start === end) {
        return callback(null, []);
      }
      if (end != null) {
        end--;
      } else {
        end = -1;
      }
      _ref = Keys.splitProjectIdAndDocId(doc_key), project_id = _ref[0], doc_id = _ref[1];
      return RedisManager.getPreviousDocOps(doc_id, start, end, callback);
    };

    ShareJsDB.prototype._writeOp = function(doc_key, opData, callback) {
      var _base;
      if ((_base = this.appliedOps)[doc_key] == null) {
        _base[doc_key] = [];
      }
      this.appliedOps[doc_key].push(opData);
      return callback();
    };

    ShareJsDB.prototype.getSnapshot = function(doc_key, callback) {
      if (doc_key !== Keys.combineProjectIdAndDocId(this.project_id, this.doc_id)) {
        return callback(new Errors.NotFoundError("unexpected doc_key " + doc_key + ", expected " + (Keys.combineProjectIdAndDocId(this.project_id, this.doc_id))));
      } else {
        return callback(null, {
          snapshot: this.lines.join("\n"),
          v: parseInt(this.version, 10),
          type: "text"
        });
      }
    };

    ShareJsDB.prototype["delete"] = function(docName, dbMeta, callback) {
      return callback();
    };

    return ShareJsDB;

  })();

}).call(this);

//# sourceMappingURL=ShareJsDB.map
