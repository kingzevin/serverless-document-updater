// Generated by CoffeeScript 1.7.1
(function() {
  var Metrics, RateLimiter, Settings, logger;

  Settings = require('settings-sharelatex');

  logger = require('logger-sharelatex');

  Metrics = require('./Metrics');

  module.exports = RateLimiter = (function() {
    function RateLimiter(number) {
      if (number == null) {
        number = 10;
      }
      this.ActiveWorkerCount = 0;
      this.CurrentWorkerLimit = number;
      this.BaseWorkerCount = number;
    }

    RateLimiter.prototype._adjustLimitUp = function() {
      this.CurrentWorkerLimit += 0.1;
      return Metrics.gauge("currentLimit", Math.ceil(this.CurrentWorkerLimit));
    };

    RateLimiter.prototype._adjustLimitDown = function() {
      this.CurrentWorkerLimit = Math.max(this.BaseWorkerCount, this.CurrentWorkerLimit * 0.9);
      logger.log({
        currentLimit: Math.ceil(this.CurrentWorkerLimit)
      }, "reducing rate limit");
      return Metrics.gauge("currentLimit", Math.ceil(this.CurrentWorkerLimit));
    };

    RateLimiter.prototype._trackAndRun = function(task, callback) {
      if (callback == null) {
        callback = function() {};
      }
      this.ActiveWorkerCount++;
      Metrics.gauge("processingUpdates", this.ActiveWorkerCount);
      return task((function(_this) {
        return function(err) {
          _this.ActiveWorkerCount--;
          Metrics.gauge("processingUpdates", _this.ActiveWorkerCount);
          return callback(err);
        };
      })(this));
    };

    RateLimiter.prototype.run = function(task, callback) {
      if (this.ActiveWorkerCount < this.CurrentWorkerLimit) {
        this._trackAndRun(task);
        callback();
        if (this.CurrentWorkerLimit > this.BaseWorkerCount) {
          return this._adjustLimitDown();
        }
      } else {
        logger.log({
          active: this.ActiveWorkerCount,
          currentLimit: Math.ceil(this.CurrentWorkerLimit)
        }, "hit rate limit");
        return this._trackAndRun(task, (function(_this) {
          return function(err) {
            if (err == null) {
              _this._adjustLimitUp();
            }
            return callback(err);
          };
        })(this));
      }
    };

    return RateLimiter;

  })();

}).call(this);

//# sourceMappingURL=RateLimitManager.map
