// Generated by CoffeeScript 1.7.1
(function() {
  var COUNT, HOST, Keys, MAX_OPS_PER_ITERATION, RND, RealTimeRedisManager, Settings, crypto, logger, os, pubsubClient, rclient;

  Settings = require('settings-sharelatex');

  rclient = require("redis-sharelatex").createClient(Settings.redis.documentupdater);

  pubsubClient = require("redis-sharelatex").createClient(Settings.redis.pubsub);

  Keys = Settings.redis.documentupdater.key_schema;

  logger = require('logger-sharelatex');

  os = require("os");

  crypto = require("crypto");

  HOST = os.hostname();

  RND = crypto.randomBytes(4).toString('hex');

  COUNT = 0;

  MAX_OPS_PER_ITERATION = 8;

  module.exports = RealTimeRedisManager = {
    getPendingUpdatesForDoc: function(doc_id, callback) {
      var multi;
      multi = rclient.multi();
      multi.lrange(Keys.pendingUpdates({
        doc_id: doc_id
      }), 0, MAX_OPS_PER_ITERATION - 1);
      multi.ltrim(Keys.pendingUpdates({
        doc_id: doc_id
      }), MAX_OPS_PER_ITERATION, -1);
      return multi.exec(function(error, replys) {
        var e, jsonUpdate, jsonUpdates, update, updates, _i, _len;
        if (error != null) {
          return callback(error);
        }
        jsonUpdates = replys[0];
        updates = [];
        for (_i = 0, _len = jsonUpdates.length; _i < _len; _i++) {
          jsonUpdate = jsonUpdates[_i];
          try {
            update = JSON.parse(jsonUpdate);
          } catch (_error) {
            e = _error;
            return callback(e);
          }
          updates.push(update);
        }
        return callback(error, updates);
      });
    },
    getUpdatesLength: function(doc_id, callback) {
      return rclient.llen(Keys.pendingUpdates({
        doc_id: doc_id
      }), callback);
    },
    sendData: function(data) {
      var message_id;
      message_id = "doc:" + HOST + ":" + RND + "-" + (COUNT++);
      if (data != null) {
        data._id = message_id;
      }
      if (Settings.publishOnIndividualChannels) {
        return pubsubClient.publish("applied-ops:" + data.doc_id, JSON.stringify(data));
      } else {
        return pubsubClient.publish("applied-ops", JSON.stringify(data));
      }
    }
  };

}).call(this);

//# sourceMappingURL=RealTimeRedisManager.map
